<?php

namespace app\modules\catalog\models;

use Yii;
use yii\db\Query;

/**
 * This is the model class for table "goods_counts".
 *
 * @property integer $id
 * @property integer $good_id
 * @property integer $variation_id
 * @property integer $store_id
 * @property integer $count
 * @property string $update
 * @property integer $status
 */
class GoodsCounts extends \app\modules\common\models\ActiveRecordRelation
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'goods_counts';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['good_id', 'variation_id', 'store_id', 'count', 'status'], 'integer'],
            [['update'], 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'good_id' => 'Good ID',
            'variation_id' => 'Variation ID',
            'store_id' => 'Store ID',
            'count' => 'Количество',
            'update' => 'Update',
            'status' => 'Status',
        ];
    }

    // Обработка количества;
    public static function variantCount($id,$variantId) {
        if($variantId > 0){
            $goodsCounts = self::find()
                ->select('SUM(`count`) AS `count`')
                ->where([
                    'status' => 1,
                    'variation_id' => $variantId,
                    'good_id' => $id,
                ])
                ->groupBy('variation_id')
                ->asArray()
                ->all();


            if(!isset($goodsCounts[0])){
                $goodsCounts[0]['count'] = 99;

            }elseif($goodsCounts[0]['count'] > 0){

            }elseif($goodsCounts[0]['count'] == 0){

            }

            if($goodsCounts[0]['count'] > 1){
                $goodsCounts[0]['count']--;
            }
            return $goodsCounts[0]['count'];
        }

        return false;
    }
    // Обработка количества;
    public static function goodCount($good_id) {
        $goodsSubQuery = (new Query())
            ->select('shop_id')
            ->from('goods')
            ->where(['status' => 1])
            ->andWhere(['id' => $good_id])
            ->one();

        $shopStoresSubQuery = (new Query())
            ->select('id')
            ->from('shops_stores')
            ->where(['shop_id' => $goodsSubQuery])
            ->all();

        $goodsCounts = (new Query())
            ->select('SUM(`count`) AS `count`')
            ->from('goods_counts')
            ->where(['good_id' => $good_id])
            ->andWhere(['IN','store_id', $shopStoresSubQuery])
            ->all();

        // Проверка количества на складах;
        if (count($goodsCounts) > 0) {
            // Обработка количества товара;
            //if ($count < 2) $count = 0;
            // Вывод количества (сколько есть);
            return $goodsCounts;
        } else {
            // Вывод количества (без ограничений);
            return 5;
        }
    }

    public static function getVariantCountList($id){
        return (new Query())
            ->select(['goods_variations.id','SUM(`goods_counts`.`count`) as `count`'])
            ->from('goods_variations')
            ->leftJoin('goods_counts','`goods_variations`.`id` = `goods_counts`.`variation_id`')
            ->where([
                'goods_variations.good_id' => $id,
                'goods_variations.status' => 1,
                'goods_counts.status' => 1,
            ])
            ->andWhere(['>', 'count', 0])
            //->indexBy('goods_variations.id')
            ->groupBy('goods_counts.variation_id')
            ->all();
    }

    public static function getVariantCountListIndexed($id){
        $list = self::getVariantCountList($id);
        $result = [];
        if(!empty($list)){
            foreach($list as $item){
                $result[$item['id']] = $item['count'];
            }
        }
        return $result;
    }

    public function getVariant(){
        return GoodsVariations::find()->where(['id' => $this->variation_id])->one();
    }

    public function getVariantOne(){
        return $this->hasOne(GoodsVariations::className(), ['id'=>'variation_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if(!empty($changedAttributes['count'])) {
            // Если количество изменили
            if(!$insert && ($changedAttributes['count'] > 0 && $this->count == 0)){
                if(!$this->variantOne){

                }else{
                    $this->variantOne->status = 0;
                    $this->variantOne->save();
                }
            }
        }
    }
}
