<?php

namespace app\modules\catalog\controllers;

use app\assets\AppAsset;
use app\assets\CatalogAsset;
use app\assets\MobileAsset;
use app\modules\catalog\models\Lists;
use app\modules\common\controllers\FrontController;
use app\modules\common\models\User;
use app\modules\catalog\models\GoodsImagesLinks;
use app\modules\catalog\models\GoodsSearch;
use app\modules\catalog\models\GoodsImages;
use app\modules\catalog\models\TagsGroups;
use app\modules\common\models\Zloradnij;
use Yii;
use app\modules\catalog\models\Catalog;
use app\modules\catalog\models\Category;
use app\modules\catalog\models\CategorySearch;
use app\modules\catalog\models\Goods;
use app\modules\catalog\models\GoodsComments;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CategoryController implements the CRUD actions for Category model.
 */
class DefaultController extends FrontController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if(!empty(Yii::$app->params['en'])) {

            if($this->layout == '@app/views/layouts/main_en'){
                CatalogAsset::register($this->view);
                $this->view->registerCssFile('/css/catalog.css');
                $this->view->registerJsFile('/js/catalog.js', ['depends' => [\yii\web\JqueryAsset::className()]]);
            }else{
                $this->view->registerCssFile('/css/catalog.css');
            }
        }else{

            if($this->layout == '@app/views/layouts/main'){
                CatalogAsset::register($this->view);
                $this->view->registerCssFile('/css/catalog.css');
                $this->view->registerJsFile('/js/catalog.js', ['depends' => [\yii\web\JqueryAsset::className()]]);
            }else{
                $this->view->registerCssFile('/css/catalog.css');
            }
        }

    }
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Category models.
     * @return mixed
     */
    public function actionIndex()
    {
        $parent = $urlList = $breadcrumbsCatalog = false;

        $model = new Category();

        $searchModelProducts = new GoodsSearch();
        $dataProviderProducts = $model->getCategoryActiveProducts(Yii::$app->request->queryParams,'new');

        foreach ($dataProviderProducts->getModels() as $product) {
            $urlList[$product->id] = $product->catalogUrl;//Category::getCategoryPath($product->categoryId, $this->catalogHash) . $product->id;
            $productsIds[] = $product->id;
        }
        $variationsAllProductsList = !empty($productsIds) ? $model->findVariations($productsIds) : [];
        $imagesAllProductsList = !empty($productsIds) ? Goods::findProductImages($productsIds) : [];
        $stickersAllProductsList = !empty($productsIds) ? Goods::findProductStickers($productsIds) : [];

        return $this->render('new', [
            'model' => $model,
            'children' => [],
            'parent' => $parent,
            'dataProviderProducts' => $dataProviderProducts,
            'searchModelProducts' => $searchModelProducts,
            'breadcrumbsCatalog' => $breadcrumbsCatalog,
            'variationsAllProductsList' => $variationsAllProductsList,
            'imagesAllProductsList' => $imagesAllProductsList,
            'stickersAllProductsList' => $stickersAllProductsList,
            'urlList' => $urlList,
            'productTypes' => TagsGroups::find()->indexBy('id')->all(),
//            'basket' => $this->basketObject,
        ]);
    }

    /**
     * Displays a single Category model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id = false, $alias = false)
    {
        $urlList = $breadcrumbsCatalog = false;

        if($alias == '/'){
            return $this->redirect('/');
        }elseif($alias =='wish-list/'){
            return $this->redirect('/catalog/wish-list');
        }else{
            $alias = explode('/',$alias);
            foreach ($alias as $i => $aliasValue) {
                if(empty($aliasValue)){
                    unset($alias[$i]);
                }
            }

            $breadcrumbsCatalog = Catalog::findBreadcrumbs($alias,Category::find()->where(['active' => 1])->orderBy('level, sort')->indexBy('id')->asArray()->all());

            if(empty($breadcrumbsCatalog)){
                return $this->redirect('/');
            }

            $currentCategory = end($breadcrumbsCatalog);

            // Сортировка товара;
            if(!empty(Yii::$app->request->post('sortable'))) {
                    $_item =  Yii::$app->request->post('sortable');
                    $position = Yii::$app->request->post('position');
                    $good_id = Yii::$app->request->post('good_id');
                if(!empty(Yii::$app->request->post('position_update'))) {
                    $customer = Goods::findOne(intval($good_id));
                    $customer->position = $position;
                    if (!$customer->save(false)) return false;
                    return 'position_update';
                }else{
                    $position = 0;
                    // Сортировка автоматический;
                    foreach ($_item as $key => $value) {
                        $position++;
                        $customer = Goods::findOne(intval($value['good_id']));
                        $customer->position = $position;
                        if (!$customer->save(false)) return false;
                    }
                    return 'position_all';
                }
            }

            if($currentCategory) {
                $model = $this->findModel($currentCategory['id']);
                $this->module->params['category'] = $model->id;

                return $this->render('view-clear'/*$view*/, [
                    'modelLists' => Lists::find()->leftJoin('category_list_links','category_list_links.list_id = lists.id')->where(['lists.status' => 1,'category_list_links.category_id' => $model->id])->andWhere(['IS NOT','image',NULL]),
                    'model' => $model,
                    'productsClear' => $model->allProductsClear,
                    'breadcrumbsCatalog' => $breadcrumbsCatalog,
                    'urlList' => $urlList,
                    'productTypes' => TagsGroups::find()->indexBy('id')->all(),
                ]);
            }
        }

        $searchModel = new CategorySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionList($id = false){

        if(!$id){
            return $this->redirect('/catalog/new');
        }

        $list = Lists::findOne($id);
        if(!$list){
            return $this->redirect('/catalog/new');
        }

        return $this->render('list',[
            'list' => $list,
        ]);
    }
    // Отзывы;
    public function actionComments(){
        $id = intval(Yii::$app->request->post('id'));
        if(!empty($id)) {
            $model = new GoodsComments();
            // Загрузка отзыв;
            $comments = GoodsComments::find()->where(['good_id' => $id, 'status' => 1])->all();
            return $this->renderPartial('comments', [
                'comments' => $comments,
                'model' => $model,
                'good_id' => $id,
            ]);
        }
    }
    // Быстрый просмотра товара;
    public function actionCompact($id = false){
        $id = intval(Yii::$app->request->post('id'));
        if(!empty($id)) {
            $model = Goods::find()
                ->where(['id' => $id])
                ->one();
            // Проверка на сущ-я урл и товар;
            if (empty($model) || $model->status == 0 || !$id) {
                return $this->redirect('/catalog/new');
            }

            $variations = Goods::getProductVariants($id);
            $tagsHash = Goods::getProductVariantsTagHash($id);

            $productImages = GoodsImagesLinks::find()->where(['good_id' => $id])->all();
            if (!$productImages) {
                $productImages = GoodsImages::find()->where(['good_id' => $id])->all();
            }
            if (!$tagsHash) {
                $tags = [];
            } else {
                foreach ($tagsHash as $tag) {
                    $tags[$tag->variationId][$tag->group_id][$tag->id] = $tag->value;
                }
            }

            return $this->renderPartial('compact', [
                'model' => $model,
                'variations' => $variations,
                'tags' => $tags,
                'productImages' => $productImages,
            ]);
        }
    }
    public function actionLists(){
        $lists = Lists::find()->where(['status' => 1])->andWhere(['IS NOT','image',NULL])->all();
        if(!$lists){
            return $this->redirect('/catalog/new');
        }

        return $this->render('lists',[
            'lists' => $lists,
        ]);
    }

    public function actionNew()
    {
        $parent = $urlList = $breadcrumbsCatalog = false;

        $model = new Category();

        $searchModelProducts = new GoodsSearch();
        $dataProviderProducts = $model->getCategoryActiveProducts(Yii::$app->request->queryParams,'new');

        foreach ($dataProviderProducts->getModels() as $product) {
            $urlList[$product->id] = $product->catalogUrl;//Category::getCategoryPath($product->categoryId, $this->catalogHash) . $product->id;
            $productsIds[] = $product->id;
        }
        $variationsAllProductsList = !empty($productsIds) ? $model->findVariations($productsIds) : [];
        $imagesAllProductsList = !empty($productsIds) ? Goods::findProductImages($productsIds) : [];
        $stickersAllProductsList = !empty($productsIds) ? Goods::findProductStickers($productsIds) : [];
        // print_arr($model);
        return $this->render('new', [
            'model' => $model,
            'children' => [],
            'parent' => $parent,
            'dataProviderProducts' => $dataProviderProducts,
            'searchModelProducts' => $searchModelProducts,
            'breadcrumbsCatalog' => $breadcrumbsCatalog,
            'variationsAllProductsList' => $variationsAllProductsList,
            'imagesAllProductsList' => $imagesAllProductsList,
            'stickersAllProductsList' => $stickersAllProductsList,
            'urlList' => $urlList,
            'productTypes' => TagsGroups::find()->indexBy('id')->all(),
        ]);
    }

    public function actionWishList()
    {

        $parent = $urlList = $breadcrumbsCatalog = false;

        $model = new Category();

        $searchModelProducts = new GoodsSearch();
        $dataProviderProducts = $model->getWishListActiveProducts(Yii::$app->request->queryParams);

        foreach ($dataProviderProducts->getModels() as $product) {
            $urlList[$product->id] = $product->catalogUrl;//Category::getCategoryPath($product->categoryId, $this->catalogHash) . $product->id;
            $productsIds[] = $product->id;
        }
        $variationsAllProductsList = [];
       // $variationsAllProductsList = !empty($productsIds) ? $model->findVariations($productsIds) : [];
        $imagesAllProductsList = !empty($productsIds) ? Goods::findProductImages($productsIds) : [];
        $stickersAllProductsList = !empty($productsIds) ? Goods::findProductStickers($productsIds) : [];

        // print_arr($model);
        return $this->render('wish-list', [
            'model' => $model,
            'children' => [],
            'parent' => $parent,
            'dataProviderProducts' => $dataProviderProducts,
            'searchModelProducts' => $searchModelProducts,
            'breadcrumbsCatalog' => $breadcrumbsCatalog,
            'variationsAllProductsList' => $variationsAllProductsList,
            'imagesAllProductsList' => $imagesAllProductsList,
            'stickersAllProductsList' => $stickersAllProductsList,
            'urlList' => $urlList,
            'productTypes' => TagsGroups::find()->indexBy('id')->all(),
        ]);
    }

    public function actionProduct($id, $alias = false){
        $alias = explode('/',$alias);
        $view = Category::changeView($id);
        $breadcrumbsCatalog = Catalog::findBreadcrumbs($alias,Category::find()->where(['active' => 1])->orderBy('level, sort')->indexBy('id')->asArray()->all());

        $model = Goods::find()
            ->where(['id' => $id])
            ->one();

        if($model->status == 0 || $model->confirm == 0){
            return $this->redirect('/catalog/new');
        }

        $variations = Goods::getProductVariants($id);
        $tagsHash = Goods::getProductVariantsTagHash($id);

        $productImages = GoodsImagesLinks::find()->where(['good_id' => $id])->all();
        if(!$productImages){
            $productImages = GoodsImages::find()->where(['good_id' => $id])->all();
        }

        if(!$tagsHash){
            $tags = [];
        }else{
            foreach($tagsHash as $tag){
                $tags[$tag->variationId][$tag->group_id][$tag->id] = $tag->value;
            }
        }
        // Загрузка отзыв;
        $comments = GoodsComments::find()->where(['good_id' => $id,'status'=>1])->all();
        // Отрпавка данные;
        if(Yii::$app->request->post('comments_form')) {
            if(!Yii::$app->request->post('name') && !Yii::$app->request->post('text'))  return json_encode(array("error"=>\Yii::t('app',"Не все поля заполнены")));

            // Добавить запись;
            $connection = Yii::$app->getDb();
            $connection->createCommand()->insert('goods_comments', [
                'good_id' => Yii::$app->request->post('good_id'),
                'user_id' => \Yii::$app->user->id,
                'name' => Yii::$app->request->post('name'),
                'text' => Yii::$app->request->post('comments'),
                'date' => date('Y-m-d H:i:s'),
                'rating' => (!empty(Yii::$app->request->post('rating')) ? Yii::$app->request->post('rating') : 0),
                'status' => 0,
            ])->execute();
            return json_encode(array("success"=>\Yii::t('app','Ваш комментарий отправлен')));
        }

        // renderPartial
        return $this->render($view, [
            'model' => $model,
            'variations' => $variations,
            'tags' => $tags,
            'productImages' => $productImages,
            'breadcrumbsCatalog' => $breadcrumbsCatalog,
            'comments' => $comments
        ]);
    }

    /**
     * Finds the Category model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Category the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Category::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
