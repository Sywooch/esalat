<?php

namespace app\modules\managment\models;

use app\modules\catalog\models\GoodsCounts;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;

/**
 * This is the model class for table "shops".
 *
 * @property integer $id
 * @property integer $shop_group_id
 * @property integer $shop_id
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_user
 * @property integer $updated_user
 * @property integer $status
 *
 * @property UsersRoles[] $usersRoles
 */
class ShopGroupRelated extends \app\modules\common\models\ActiveRecordRelation
{
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'created_user',
                'updatedByAttribute' => 'updated_user',
            ],
        ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'shop_group_related';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['created_at', 'updated_at', 'created_user', 'updated_user','status','shop_group_id','shop_id'], 'integer'],
            [['shop_group_id','shop_id'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'shop_group_id' => 'Shop Group',
            'shop_id' => 'Shop Id',
            'created_at' => 'Created',
            'updated_at' => 'Updated',
            'created_user' => 'Created User',
            'updated_user' => 'Updated User',
            'status' => Yii::t('admin','Активный'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShopGroupRelated()
    {
        return $this->hasMany(ShopGroupRelated::className(), ['shop_group_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        $goodsCount = GoodsCounts::find()
            ->leftJoin('shops_stores','shops_stores.id = goods_counts.store_id')
            ->where(['shops_stores.shop_id' => $this->shop_id])
            ->all();
        if(!$goodsCount){

        }else{
            foreach($goodsCount as $count){
                $count->delete();
            }
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    private function disableShopProducts(){
        $products = Goods::find()
            ->leftJoin('shop_group_variant_link','shop_group_variant_link.product_id = goods.id')
            ->leftJoin('shop_group_related','shop_group_related.shop_group_id = shop_group_variant_link.shop_group_id')
            ->where([
                'shop_group_related.id' => $this->id,
                'goods.status' => 1,
            ])
            ->all();
        if(!$products){

        }else{
            foreach($products as $product){
                $product->status = 0;
                $product->save();
            }
        }
    }
}
