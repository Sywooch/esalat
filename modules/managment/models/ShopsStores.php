<?php

namespace app\modules\managment\models;

use app\modules\catalog\models\Goods;
use app\modules\catalog\models\GoodsCounts;
use app\modules\catalog\models\GoodsVariations;
use app\modules\common\models\Address;
use app\modules\common\models\Zloradnij;
use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Query;

/**
 * This is the model class for table "shops_stores".
 *
 * @property integer $id
 * @property integer $shop_id
 * @property integer $city_id
 * @property string $code
 * @property string $name
 * @property string $address
 * @property integer $show
 * @property integer $position
 * @property integer $status
 */
class ShopsStores extends \app\modules\common\models\ActiveRecordRelation
{
    public $shopGroupId;
    public $shopTitle;
//    public $addressString;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'shops_stores';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['address_id','phone'],'required'],
            [['shop_id', 'city_id', 'show', 'status'], 'integer'],
            [['phone'], 'string', 'min' => 13, 'max' => 16],
            [['address'], 'string', 'max' => 255],
            [['shop_id', 'city_id', 'show', 'status','shopGroupId'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'shop_id' => 'Shop ID',
            'city_id' => 'City ID',
            'code' => 'Code',
            'name' => 'Name',
            'address_id' => 'Address ID',
//            'addressString' => 'Address',
            'address' => 'Address',
            'show' => 'Show',
            'position' => 'Position',
            'status' => 'Status',
        ];
    }

    public static function getStoreList($shopGroup){
        return self::find()
            ->select([
                'shops_stores.*',
                'shop_group_related.shop_group_id AS shopGroupId',
                'shops.name AS shopName',
                'CONCAT(address.street,", ",address.house) AS address'
            ])
            ->leftJoin('shops', 'shops.id = shops_stores.shop_id')
            ->leftJoin('shop_group_related', 'shops.id = shop_group_related.shop_id')
            ->leftJoin('address', 'address.id = shops_stores.address_id')
            ->where(['IN', 'shop_group_related.shop_group_id', $shopGroup->shop_group_id])
            ->all();
    }

    public function getShopNameString(){
        return $this->hasOne(Shops::className(), ['id' => 'shop_id']);
    }

    public function getShop(){
        return $this->hasOne(Shops::className(), ['id' => 'shop_id']);
    }

    public function getShopNameStringTitle(){
        $shop = $this->shopNameString;
        return $shop ? $shop->name : '';
    }

    public function getAddressString(){
        return $this->hasOne(Address::className(), ['id' => 'address_id']);
    }

    public function getAddressStringTitle(){
        $address = $this->addressString;
        return $address ? $address->street . ($address->house ? ', '.$address->house:'') . ($address->room ? ', '.$address->room:'') : '';
    }

    public function removeAllCountItems(){
        GoodsCounts::deleteAll(['store_id' => $this->id]);
    }
    public function setAllCountItems(){
        GoodsCounts::deleteAll(['store_id' => $this->id]);
        $products = self::getAllVariationsQuery();
        $products = $products->where(['shops_stores.id' => $this->id])->all();
        if(!$products){

        }else{
            foreach ($products as $product) {
                $goodsCount = new GoodsCounts();
                $goodsCount->good_id = $product->good_id;
                $goodsCount->variation_id = $product->id;
                $goodsCount->store_id = $this->id;
                $goodsCount->count = 0;
                $goodsCount->update = date('Y-m-d H:i:s');
                $goodsCount->status = 1;
                $goodsCount->save();
            }
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        // Если склад отключили
        if(!$insert && ($changedAttributes['status'] == 1 && $this->status == 0)){
            $this->removeAllCountItems();
        }
        // Если склад создали/включили
        if(($insert && $this->status == 1) || ($changedAttributes['status'] == 0 && $this->status == 1)){
            $this->setAllCountItems();
        }
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = ShopsStores::find();

        // add conditions that should always apply here
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'shop_id' => $this->shop_id,
            'address_id' => $this->address_id,
            'status' => $this->status,
        ]);

        $query->andFilterWhere(['like', 'name', $this->name])
            ->andFilterWhere(['like', 'shopTitle', $this->shopNameStringTitle])
            ->andFilterWhere(['like', 'addressTitle', $this->addressStringTitle]);


        return $dataProvider;
    }

    public function getTimeTables()
    {
        return $this->hasMany(ShopStoresTimetable::className(), ['store_id' => 'id']);
    }
}
