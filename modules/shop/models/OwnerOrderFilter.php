<?php

namespace app\modules\shop\models;

use app\modules\basket\models\Basket;
use app\modules\catalog\models\Category;
use app\modules\catalog\models\Codes;
use app\modules\catalog\models\Goods;
use app\modules\catalog\models\GoodsTypes;
use app\modules\common\models\ActiveRecordRelation;
use app\modules\common\models\DeliveriesPrices;
use app\modules\common\models\User;
use app\modules\common\models\UsersPays;
use app\modules\common\models\Zloradnij;
use app\modules\managment\models\Shops;
use app\modules\managment\models\ShopsStores;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "orders".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $code_id
 * @property integer $type
 * @property string $extremefitness
 * @property string $comments
 * @property string $comments_call_center
 * @property string $date
 * @property integer $call_status
 * @property integer $status
 *
 * @property UsersPays[] $usersPays
 */
class OwnerOrderFilter extends Model
{
    private $params = [];
    private $order;
    private $orderQuery;
    private $orderQueryEmpty;
    private $ordersItemsQuery;

    public $dateStatus = 0;
    public $dateStart;
    public $dateEnd;

    public $shops = [];
    public $clients = [];
    public $staff = 2;
    public $category;
    public $productType;
    public $orderItemStatus = 1;
    public $orderItemStatusId;
    public $orderStatus = 1;
    public $type;
    public $orderId;
    public $status_id;
    public $store_id;
    public $user_id;
    public $code;
    public $productTypeList;
    public $addressClub;

    //Новый отчет о продажах
    public $user_type;
    public $delivery_store_id;
    public $not_our_shops;
    public $not_free_delivery;
    public $our_shops;
    public $group;
    public $good_id;
    public $basket_sort;
    public $no_promo;

    public $itemsIDs;

    public $priceResult = [
        'fullPrice' => 0,
        'discount' => 0,
        'bonus' => 0,
        'deliveryPrice' => 0,
        'shopsPays' => 0,
        'feePays' => 0,
        'deliveryPays' => 0,
        'fullPriceIn' => 0,
        'commission' => 0,
        'commissionMinus' => 0,
        'commissionDelivery' => 0,

        'cancel' => 0,
    ];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->orderQuery = $this->getEmptyQuery();
    }

    public function getEmptyQuery(){
        return Orders::find()
            ->leftJoin('orders_groups','orders_groups.order_id = orders.id')
            ->leftJoin('orders_items','orders_items.order_group_id = orders_groups.id')
            ->leftJoin('users','users.id = orders.user_id')
            ->orderBy('orders.id DESC');
    }

    public function load($data, $formName = null)
    {
        if(empty($data)){

            if(!empty(Yii::$app->session['reports']['order']['find']['params'])){
                $data = Yii::$app->session['reports']['order']['find']['params'];
            }
        }
        else{
            $_SESSION['reports']['order']['find']['params'] = $data;
        }

        if(!empty($data['OwnerOrderFilter'])){
            foreach ($data['OwnerOrderFilter'] as $key => $value) {
                $this->{$key} = $value;
            }
        }
    }

    public function setParams($data)
    {
        if(!empty($data['OwnerOrderFilter'])){
            foreach ($data['OwnerOrderFilter'] as $key => $value) {
                $this->{$key} = $value;
            }
        }
    }

    public function getCategoryList(){
        return Category::find()->where(['active' => 1,'level' => 0])->all();
    }

    public function getProductTypeList(){
        return GoodsTypes::find()->where(['status' => 1])->all();
    }

    public function getOrderListFullPrice(){
        return $this->orderQueryEmpty->sum('orders_items.price * orders_items.count');
    }

    public function getOrderListFullBonus(){
        return $this->orderQueryEmpty->sum('orders_items.bonus * orders_items.count');
    }

    public function getOrderListFullDiscount(){
        return $this->orderQueryEmpty->sum('orders_items.discount * orders_items.count');
    }

    public function getOrderListFullDelivery(){
        return $this->orderQueryEmpty->select(['orders_groups.delivery_price AS dPrice','orders_groups.id'])->groupBy('orders_groups.id')->sum('dPrice');
    }

    public function getOrderList(){
        return $this->orderQuery->groupBy('orders.id');
    }

    public function getItemList(){
        return $this->orderQuery->select(['orders_items.good_id','sum(orders_items.good_id.count)'])->groupBy('orders_items.good_id');
    }

    public function getOrderListFilter(){
        if(!empty($this->productType)){
            $this->orderQuery
                ->leftJoin('goods','goods.id = orders_items.good_id')
                ->andWhere(['IN','goods.type_id',$this->productType]);
        }
        //----------------------------

        if($this->staff == 0){
            $this->orderQuery
                ->andWhere(['IS','users.staff',NULL]);
        }
        elseif($this->staff == 1){
            $this->orderQuery
                ->andWhere(['>=','users.staff', '0']);
        }
        //----------------------------
        if(!empty($this->clients)){
            foreach ($this->clients['id'] as $i => $client) {
                if(empty($client)){
                    unset($this->clients['id'][$i]);
                }
            }
        }
        if(!empty($this->clients)){
            $this->orderQuery
                ->andWhere(['IN','orders.user_id',$this->clients['id']]);

            $this->clients = ArrayHelper::map(User::find()->where(['IN','id',$this->clients['id']])->all(),'id','name');
        }
        //----------------------------
        if(!empty($this->shops)){
            foreach ($this->shops['id'] as $i => $shop) {
                if(empty($shop)){
                    unset($this->shops['id'][$i]);
                }
            }
        }
        if(!empty($this->shops['id'])){
            $this->orderQuery
                ->leftJoin('shops_stores','shops_stores.id = orders_items.store_id')
                ->leftJoin('shops','shops.id = shops_stores.shop_id')
                ->andWhere(['IN','shops.id',$this->shops['id']]);

            $this->shops = ArrayHelper::map(Shops::find()->where(['IN','id',$this->shops['id']])->all(),'id','name');
        }
        //----------------------------
        if(!empty($this->orderId)){
            $this->orderQuery->andWhere(['orders.id' => intval($this->orderId)]);
        }
        if(!empty($this->params['Orders']['type'])){
            $this->orderQuery->andWhere(['orders.type' => intval($this->type)]);
        }
        if(!empty($this->params['Orders']['user_id'])){
            $this->orderQuery->andWhere(['orders.user_id' => intval($this->user_id)]);
        }
        //----------------------------
        //----------------------------
        if($this->dateStatus == 0){
            if(!empty($this->dateStart)){
                $this->orderQuery->andWhere(['>=','orders.date',$this->dateStart . ' 00:00']);
            }
            if(!empty($this->dateEnd)){
                $this->orderQuery->andWhere(['<=','orders.date',$this->dateEnd . ' 23:59:59']);
            }
        }else{
            if(!empty($this->dateStart)){
                $this->orderQuery
                    ->andWhere(['>=','orders_groups.delivery_date',$this->dateStart . ' 00:00']);
            }
            if(!empty($this->dateEnd)){
                $this->orderQuery
                    ->andWhere(['<=','orders_groups.delivery_date',$this->dateEnd . ' 23:59:59']);
            }
        }
        //----------------------------
        if(!empty($this->code)){
            $this->orderQuery->leftJoin('codes','codes.id = orders.code_id')->andWhere(['codes.code' => intval($this->code)]);
        }
        //----------------------------

        if(!empty($this->store_id)){
            if(!empty($this->code)){

            }else{
                $this->orderQuery->leftJoin('codes','codes.id = orders.code_id');
            }
            $this->orderQuery->leftJoin('users AS usersForCodes','usersForCodes.id = codes.user_id');
            $this->orderQuery->andWhere([
                'OR',
                ['orders_groups.store_id' => $this->store_id],
                ['usersForCodes.store_id' => $this->store_id]
            ]);
        }
        //----------------------------


        if(!empty($this->status_id)){
            // Обработка статусов;

            if($this->status_id > 1000){
                $this->orderQuery->andWhere(['orders_items.status_id' => intval($this->status_id)]);
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
            }
            if($this->status_id == 1008){
                $this->orderQuery->andWhere(['orders_items.status' => 0]);
            }
            if($this->status_id == 'NO'){
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
                $this->orderQuery->andWhere([
                    'OR',
                    ['!=','orders_items.status_id',1007],
                    ['IS','orders_items.status_id',NULL]
                ]);
            }
            if($this->status_id == 'NULL'){
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
                $this->orderQuery->andWhere(['IS','orders_items.status_id',NULL]);
            }
            if($this->status_id == 0){
                $this->orderQuery->andWhere(['orders_items.status' => 0]);
                $this->orderQuery->andWhere([
                    'OR',
                    ['!=','orders_items.status_id',1008],
                    ['IS','orders_items.status_id',NULL]
                ]);
            }
        }else{
            $this->orderQuery->andWhere(['orders_items.status' => 1]);
        }
        $this->orderQuery->andWhere(['orders.status' => 1]);

        $this->orderQueryEmpty = clone $this->orderQuery;

        $this->priceResult['shopsPays'] = $this->orderQueryEmpty->sum('(orders_items.price - orders_items.discount - orders_items.comission) * orders_items.count');
        $this->priceResult['feePays'] = $this->orderQueryEmpty->sum('orders_items.fee * orders_items.count');

        $this->priceResult['fullPrice'] = $this->orderQueryEmpty->sum('orders_items.price * orders_items.count');
        $this->priceResult['bonus'] = $this->orderQueryEmpty->sum('orders_items.bonus * orders_items.count');
        $this->priceResult['discount'] = $this->orderQueryEmpty->sum('orders_items.discount * orders_items.count');

        $this->priceResult['commission'] = $this->orderQueryEmpty->sum('(orders_items.discount + orders_items.comission) * orders_items.count');
        $this->priceResult['commissionMinus'] = $this->orderQueryEmpty->sum('(orders_items.discount + orders_items.bonus + orders_items.fee) * orders_items.count');

        $this->priceResult['deliveryPrice'] = $this->orderQueryEmpty
            ->select(['orders_groups.delivery_price AS dPrice','orders_groups.id'])
            ->groupBy('orders_groups.id')
            ->sum('dPrice');
        $this->priceResult['deliveryPays'] = $this->orderQueryEmpty
            ->leftJoin('orders_selects','orders_selects.order_group_id = orders_groups.id')
            ->select(['orders_selects.price AS sPrice','orders_groups.id','orders_groups.delivery_surcharge AS deliverySurcharge'])
            ->andWhere(['>','orders_selects.status',0])
            ->groupBy('orders_groups.id')
            ->sum('sPrice + deliverySurcharge');

        $this->priceResult['commissionDelivery'] = $this->priceResult['deliveryPrice'] - $this->priceResult['deliveryPays'];
        $this->priceResult['cancel'] = $this->orderQueryEmpty
            ->select(['orders_items.price as oPrice','orders_items.discount as oDiscount','orders_items.bonus as oBonus','orders_items.count as oCount'])
            ->andWhere(['orders_items.status' => 0])
            ->sum('(oPrice - oDiscount - oBonus) * oCount');
        if(empty($this->priceResult['cancel'])){
            $this->priceResult['cancel'] = 0;
        }

    }

    public function getOrderListQuery(){
        if(empty($this->dateStart) && empty($this->dateEnd)){
            $this->dateStart = date("Y-m-d");
            $this->dateEnd = date("Y-m-d");
        }
        //----------------------------
        if($this->staff == 0){//сотрудник
            $this->orderQuery
                ->andWhere(['IS','users.staff',NULL]);
        }
        elseif($this->staff == 1){
            $this->orderQuery
                ->andWhere(['>=','users.staff', '0']);
        }

        if(!empty($this->store_id)){
            $this->orderQuery->andWhere(['users.store_id'=>$this->store_id]);
        }

        //----------------------------поставщик
        if(!empty($this->shops)){
            $this->orderQuery
                ->leftJoin('shops_stores','shops_stores.id = orders_items.store_id')
                ->leftJoin('shops','shops.id = shops_stores.shop_id')
                ->andWhere(['IN','shops.id',$this->shops]);

            //$this->shops = ArrayHelper::map(Shops::find()->where(['IN','id',$this->shops])->all(),'id','name');
        }

        if(!empty($this->category)){
            $arCategory[] = $this->category;
            $arCategory = $this->getChildrenCategory($this->category,$arCategory);
            //print_r($arCategory);
            $this->orderQuery
                ->leftJoin('category_links','category_links.product_id = orders_items.good_id')
                ->andWhere(['IN','category_links.category_id',$arCategory]);

        }

        if(!empty($this->productType)){
            $this->orderQuery
                ->leftJoin('goods','goods.id = orders_items.good_id')
                //->andWhere(['IN','goods.type_id',$this->productType]);
                ->andWhere(['goods.type_id'=>$this->productType]);
        }

        //----------------------------
        if($this->no_promo == 1){
            $this->orderQuery->andWhere(['orders.code_id' => NULL]);
        }

        if($this->not_free_delivery == 1){
            $this->orderQuery
                ->andWhere(['>','orders_groups.delivery_price',0]);
        }

        if($this->our_shops == 1 || $this->not_our_shops == 1){
            $this->orderQuery
                ->leftJoin('goods','goods.id = orders_items.good_id');

            if($this->our_shops == 1){
                $this->orderQuery
                    ->andWhere(['goods.type_id' => 1011]);
            }

            if($this->not_our_shops == 1){
                $this->orderQuery
                    ->andWhere(['<>','goods.type_id',1011]);
            }
        }

        if(!empty($this->code)){
            $this->orderQuery->leftJoin('codes','codes.id = orders.code_id')->andWhere(['codes.code' => intval($this->code)]);
        }

        if(!empty($this->orderId)){
            $this->orderQuery->andWhere(['orders.id' => intval($this->orderId)]);
        }
        if(!empty($this->params['Orders']['user_id'])){
            $this->orderQuery->andWhere(['orders.user_id' => intval($this->user_id)]);
        }

        if(!empty($this->user_id)){
            $this->orderQuery->andWhere(['orders.user_id' =>$this->user_id]);
        }
        //----------------------------
        if($this->dateStatus == 0){
            if(!empty($this->dateStart)){
                $this->dateStart = date('Y-m-d',strtotime($this->dateStart ));
                $this->orderQuery->andWhere(['>=','orders.date',$this->dateStart . ' 00:00']);
            }
            if(!empty($this->dateEnd)){
                $this->dateEnd = date('Y-m-d',strtotime($this->dateEnd ));
                $this->orderQuery->andWhere(['<=','orders.date',$this->dateEnd . ' 23:59:59']);
            }
        }
        else{
            if(!empty($this->dateStart)){
                $this->dateStart = date('Y-m-d',strtotime($this->dateStart ));
                $this->orderQuery
                    ->andWhere(['>=','orders_groups.delivery_date',$this->dateStart . ' 00:00']);
            }
            if(!empty($this->dateEnd)){
                $this->dateEnd = date('Y-m-d',strtotime($this->dateEnd ));
                $this->orderQuery
                    ->andWhere(['<=','orders_groups.delivery_date',$this->dateEnd . ' 23:59:59']);
            }
        }

        if(!empty($this->addressClub)){
            $this->orderQuery
                ->andWhere(['orders_groups.address_id'=>$this->addressClub]);//, 'orders_groups.delivery_id'=>1003]);
        }
        //----------------------------

        if(!empty($this->good_id)){
            $this->orderQuery->andWhere(['orders_items.good_id' => $this->good_id]);
        }

        $cancelQuery = clone $this->orderQuery;

        if(!empty($this->status_id)){

            // Обработка статусов;

            if($this->status_id > 1000){
                $this->orderQuery->andWhere(['orders_items.status_id' => intval($this->status_id)]);
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
            }
            if($this->status_id == 1008){
                $this->orderQuery->andWhere(['orders_items.status' => 0]);
            }

            if($this->status_id == '-1'){
                $this->orderQuery->andWhere(['orders_items.status' => 0]);
            }

            if($this->status_id == 'NO'){
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
                $this->orderQuery->andWhere([
                    'OR',
                    ['!=','orders_items.status_id',1007],
                    ['IS','orders_items.status_id',NULL]
                ]);
            }
            if($this->status_id == 999){
                $this->orderQuery->andWhere(['orders_items.status' => 1]);
                $this->orderQuery->andWhere(['IS','orders_items.status_id',NULL]);
            }
            if($this->status_id == 0){
                $this->orderQuery->andWhere(['orders_items.status' => 0]);
                $this->orderQuery->andWhere([
                    'OR',
                    ['!=','orders_items.status_id',1008],
                    ['IS','orders_items.status_id',NULL]
                ]);
            }
        }
        else{
            $this->orderQuery->andWhere(['orders_items.status' => 1]);
        }


        $cancelQuery->andWhere(['NOT LIKE','orders.comments','test']);
        $cancelQuery->andWhere(['NOT LIKE','orders.comments','тест']);
        $cancelQuery->andWhere(['NOT LIKE','orders.comments','tect']);
        $cancelQuery->andWhere(['NOT LIKE','orders.comments','te$t']);
        $this->priceResult['cancel'] = $cancelQuery->select(['orders_items.price as oPrice','orders_items.discount as oDiscount','orders_items.bonus as oBonus','orders_items.count as oCount'])->andWhere(['orders_items.status' => 0])
            ->sum('(oPrice - oDiscount - oBonus) * oCount');


        $this->orderQuery->andWhere(['orders.status' => 1]);

        if($this->basket_sort == 1){
            $this->orderQuery->orderBy('orders_items.id');

        }
        $this->orderQueryEmpty = clone $this->orderQuery;



        if(!empty($this->good_id)){
            $this->orderQueryEmpty->andWhere(['orders_items.good_id' => $this->good_id]);
        }


        $this->priceResult['shopsPays'] = $this->orderQueryEmpty->select(['orders_items.price as oPrice','orders_items.discount as oDiscount','orders_items.bonus as oBonus','orders_items.count as oCount'])
            ->sum('(oPrice - oDiscount - oBonus) * oCount');
        $this->priceResult['feePays'] = $this->orderQueryEmpty->select(['orders_items.fee as oFee','orders_items.count as oCount'])->sum('oFee * oCount');
        $this->priceResult['fullPrice'] = $this->orderQueryEmpty->select(['orders_items.price as oPrice','orders_items.count as oCount'])->sum('oPrice * oCount');
        $this->priceResult['fullPriceIn'] = $this->orderQueryEmpty->select(['orders_items.price as oPrice','orders_items.comission as oComission','orders_items.count as oCount'])->sum('(oPrice-oComission) * oCount');
        $this->priceResult['bonus'] = $this->orderQueryEmpty->select(['orders_items.bonus as oBonus','orders_items.count as oCount'])->sum('oBonus * oCount');
        $this->priceResult['discount'] = $this->orderQueryEmpty->select(['orders_items.discount as oDiscount','orders_items.count as oCount'])->sum('oDiscount * oCount');
        $this->priceResult['commission'] = $this->orderQueryEmpty->select(['orders_items.discount as oDiscount','orders_items.comission as oComission','orders_items.count as oCount'])->sum('(oDiscount + oComission) * oCount');
        $this->priceResult['commissionMinus'] = $this->orderQueryEmpty->select(['orders_items.discount as oDiscount','orders_items.bonus as oBonus','orders_items.fee as oFee','orders_items.count as oCount'])->sum('(oDiscount + oBonus + oFee) * oCount');

        $this->priceResult['deliveryPrice'] = $this->orderQueryEmpty
            ->select(['orders_groups.delivery_price AS dPrice','orders_groups.id'])
            ->groupBy('orders_groups.id')
            ->sum('dPrice');
        $this->priceResult['deliveryPays'] = $this->orderQueryEmpty
            ->leftJoin('orders_selects','orders_selects.order_group_id = orders_groups.id')
            ->select(['orders_selects.price AS sPrice','orders_groups.id','orders_groups.delivery_surcharge AS deliverySurcharge'])
            ->andWhere(['>','orders_selects.status',0])
            ->groupBy('orders_groups.id')
            ->sum('sPrice + deliverySurcharge');

        $this->priceResult['commissionDelivery'] = $this->priceResult['deliveryPrice'] - $this->priceResult['deliveryPays'];




        if(empty($this->priceResult['cancel'])){
            $this->priceResult['cancel'] = 0;
        }

        $itemQuery = clone $this->orderQuery;
        $this->itemsIDs = $itemQuery->select('orders_items.id')->asArray()->All();

    }

    private function getChildrenCategory($category_id, $arCategory){
        if(Category::find()->where(['parent_id'=>$category_id])->All()){
            foreach (Category::find()->where(['parent_id'=>$category_id])->All() as $category){
                $arCategory[] = $category->id;
                $arCategory = $this->getChildrenCategory($category->id,$arCategory);
            }
        }

        return $arCategory;
    }
}

